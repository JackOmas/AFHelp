apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.lsy.app.help"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 5
        versionName "1.4"

        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:support-v13:25.3.1'
    compile files('libs/locSDK_6.23.jar')
    compile files('libs/android-support-v13.jar')
    compile files('libs/pgyer_sdk_2.2.2.jar')
    compile files('libs/sqlitejdbc-v056.jar')
    //optional, help to generate the final application
    provided 'com.tencent.tinker:tinker-android-anno:1.9.1'
    //tinker's main Android lib
    compile 'com.tencent.tinker:tinker-android-lib:1.9.1'
}

def getTinkerIdValue() {
    return 100
}

def bakPath = file("${buildDir}/bakApk/")

ext{
    //配置是否使用thinker构建
    thinkerEnabled = true
    tinkerOldApkPath = "${bakPath}/app-release-0421-12-34-45.apk"
}

def buildWithThinker() {
    return ext.thinkerEnabled
}

// 基础APK的位置
def getOldApkPath() {
    return ext.tinkerOldApkPath
}

if (buildWithThinker()) {
    apply plugin: 'com.tencent.tinker.patch'
    //thinker全局配置
    tinkerPatch {
        oldApk = getOldApkPath()
        buildConfig{
            tinkerId = getTinkerIdValue()
        }
    }
}

